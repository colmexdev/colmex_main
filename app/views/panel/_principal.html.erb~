<div class="chart-cont" id="cont-1">
	<svg id="svg1">
	</svg>
</div>

<div class="chart-cont" id="cont-2">
	<svg id="svg_p">
	</svg>
</div>

<div class="chart-cont" id="cont-devs">
	<svg id="svg_pd">
	</svg>
</div>

<div id="query-output"></div>

<script type="text/javascript">
	$.ajax({
		url: "<%= panel_princ_path %>",
		dataType: "JSON",
		success: function(result){
			//Variables para filtrado
			var dataset = crossfilter(result["groups"]);

			var objetosPorTipo = dataset.dimension(function(d){return d["tipo"]});
			var objetosPorFechaUpd = dataset.dimension(function(d){return d["fecha_upd"]});
			var objetosPorFechaGen = dataset.dimension(function(d){return d["fecha_creacion"]});

			//var objetosAgrupadosPorTipo = objetosPorTipo.group();
			//var objetosAgrupadosPorFechaUpd = objetosPorFechaUpd.group();
			//var objetosAgrupadosPorFechaGen = objetosPorFechaGen.group();

			var objetosFiltradosPorFecha = objetosPorFechaUpd.filter(function(d){ return (new Date(d).getTime() >= new Date(result["last_time"]).getTime() && new Date(d).getTime() <= new Date("<%= Date.today %>").getTime())});

			var objetosContadosPorFecha = objetosFiltradosPorFecha.group().reduceCount(function(d){ return d}).top(Infinity);
			var objetosContadosPorTipo = objetosPorTipo.group().reduceCount(function(d){return d}).top(Infinity);
			console.log(objetosContadosPorTipo);

			var fechas_ac = completaFechas(new Date(result["last_time"]),new Date("<%= Date.today %>"));
			var total_upds = 0;
			for(var j=0; j<fechas_ac.length; j++){
				for(var i=0; i<objetosContadosPorFecha.length; i++){
					if(fechas_ac[j]["fecha"].getTime() == new Date(objetosContadosPorFecha[i].key).getTime()){
						total_upds = total_upds + objetosContadosPorFecha[i].value;
						fechas_ac[j]["val"] = objetosContadosPorFecha[i].value;
						break;
					}
				}
			}
			//Variables para graficación
			var margins = {t: 20, b: 20, r: 30, l: 30};
			var sizes = {uc: {w: 950, h: 600}, pc: {w: 500, h: 500}};

			//Gráfica de tiempo (Línea)
			var x = escala('t',[new Date(result["last_time"]),new Date("<%= Date.today %>")],[0,sizes["uc"]["w"]-margins["l"]]);

			var y = escala('l',[0,d3.max(objetosContadosPorFecha,function(d){ return d.value})],[sizes["uc"]["h"]-margins["b"]-margins["t"],0]);

			var xAxis = eje('b',x,30,2,-2,d3.timeFormat("%d/%m"));
			var yAxis = eje('r',y,10,2,-2);

			var svg = d3.select("#cont-1")
				.style("max-width","1100px")
				.style("height",sizes["uc"]["h"]+"px")
				.style("min-width",sizes["uc"]["w"]+"px")
				.select("#svg1")
  	 		.attr("preserveAspectRatio", "xMinYMin meet")
   			.attr("viewBox", "0 0 "+sizes["uc"]["w"]+" "+sizes["uc"]["h"]);

			var gX = svg.append("g")
				.attr("class", "axis axis-x")
				.attr("transform","translate("+margins["l"]+","+(sizes["uc"]["h"]-margins["b"])+")")
				.call(xAxis);

			var gY = svg.append("g")
				.attr("class", "axis axis-y")
				.attr("transform","translate("+margins["l"]+","+(margins["t"])+")")
				.call(yAxis);

			var linea = d3.line()
				.x(function(d){return x(new Date(d["fecha"]))})
				.y(function(d){return y(d["val"])})
				.curve(d3.curveMonotoneX);

			var uc_line = svg.append("path")
      	.data([fechas_ac])
      	.attr("class", "line")
				.attr("transform","translate("+margins["l"]+","+(margins["t"])+")")
				.attr("fill","none")
				.attr("stroke","black")
      	.attr("d", linea);

			var circulos = svg.selectAll(".nodes")
				.data(fechas_ac)
				.enter().append("circle")
				.attr("transform","translate("+margins["l"]+","+(margins["t"])+")")
				.attr("id",function(d,i){return "punto-" + i})
				.attr("r", "3px")
				.attr("cx", function(d){ return x(new Date(d["fecha"]))})
				.attr("cy", function(d){ return y(d["val"])})
				.attr("stroke", "#dddddd")
				.attr("stroke-width", 2);
				
			//Gráfica de porcentajes (Pastel)
			pieChart("#cont-1",{"max-width":"500px","height":sizes["pc"]["h"]+"px","min-width":sizes["pc"]["w"]+"px"},"#svg_p",[sizes["pc"]["w"],sizes["pc"]["h"]],"pie_chart",[20,180],[0.8,9],"sect",objetosContadosPorTipo);

			/*var svg_p = d3.select("#cont-1")
				.style("max-width","500px")
				.style("height",sizes["pc"]["h"]+"px")
				.style("min-width",sizes["pc"]["w"]+"px")
				.select("#svg_p")
  	 		.attr("preserveAspectRatio", "xMinYMin meet")
   			.attr("viewBox", "0 0 "+sizes["pc"]["w"]+" "+sizes["pc"]["h"])
				.append("g")
				.attr("id","pie_chart")
				.attr("transform","translate("+(sizes["pc"]["w"]/2)+","+(sizes["pc"]["h"]/2)+")");

			var arc = d3.arc()
					.outerRadius(200 - 10)
					.innerRadius(0)
					.padAngle(0.8)
					.padRadius(10);

			/*var labelArc = d3.arc()
					.outerRadius(radius - 40)
					.innerRadius(radius - 40);

			var pie = d3.pie()
					.sort(null)
					.value(function(d) { return d.value; });

			var p_c = svg_p.selectAll(".sect")
					.data(pie(objetosContadosPorTipo))
					.enter().append("g")
					.attr("class","sector")
					.append("path")
					.attr("d",arc);*/
		}
	});
</script>
<script type="text/javascript">
  var CLIENT_ID = '384237971543-uv4rn3cj3m33v5trf0oip7ff03ojl1fm.apps.googleusercontent.com';

  // Set authorized scope.
  var SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];


  function authorize(event) {
    // Handles the authorization flow.
    // `immediate` should be false when invoked from the button click.
    var useImmdiate = false;
    var authData = {
      client_id: CLIENT_ID,
      scope: SCOPES,
      immediate: useImmdiate
    };

    gapi.auth.authorize(authData, function(response) {
      if (response.error) {
        alert("Error en recabación de analíticos");
      }
      else {
        queryAccounts();
      }
    });
  }


function queryAccounts() {
  // Load the Google Analytics client library.
  gapi.client.load('analytics', 'v3').then(function() {

    // Get a list of all Google Analytics accounts for this user
    gapi.client.analytics.management.accounts.list().then(handleAccounts);
  });
}


function handleAccounts(response) {
  // Handles the response from the accounts list method.
  if (response.result.items && response.result.items.length) {
    // Get the first Google Analytics account.
    var firstAccountId = response.result.items[0].id;

    // Query for properties.
    queryProperties(firstAccountId);
  } else {
    console.log('No accounts found for this user.');
  }
}


function queryProperties(accountId) {
  // Get a list of all the properties for the account.
  gapi.client.analytics.management.webproperties.list(
      {'accountId': accountId})
    .then(handleProperties)
    .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}


function handleProperties(response) {
  // Handles the response from the webproperties list method.
  if (response.result.items && response.result.items.length) {

    // Get the first Google Analytics account
    var firstAccountId = response.result.items[0].accountId;

    // Get the first property ID
    var firstPropertyId = response.result.items[0].id;

    // Query for Views (Profiles).
    queryProfiles(firstAccountId, firstPropertyId);
  } else {
    console.log('No properties found for this user.');
  }
}


function queryProfiles(accountId, propertyId) {
  // Get a list of all Views (Profiles) for the first property
  // of the first Account.
  gapi.client.analytics.management.profiles.list({
      'accountId': accountId,
      'webPropertyId': propertyId
  })
  .then(handleProfiles)
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}


function handleProfiles(response) {
  // Handles the response from the profiles list method.
  if (response.result.items && response.result.items.length) {
    // Get the first View (Profile) ID.
    var firstProfileId = response.result.items[0].id;

    // Query the Core Reporting API.
    queryCoreReportingApi(firstProfileId);
  } else {
    console.log('No views (profiles) found for this user.');
  }
}


function queryCoreReportingApi(profileId) {
  // Query the Core Reporting API for the number sessions for
  // the past seven days.
  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:deviceCategory'
  })
  .then(function(response) {
		var results = response.result.rows;
		var data_devs = [];
		for(var a in results){
			data_devs.push({key: results[0],value: results[1]});
		}
			pieChart("#cont-devs",{"max-width":"500px","height":sizes["pc"]["h"]+"px","min-width":sizes["pc"]["w"]+"px"},"#svg_devs",[sizes["pc"]["w"],sizes["pc"]["h"]],"pie_devs",[20,180],[0.8,9],"sect",data_devs);
    //var formattedJson = JSON.stringify(response.result, null, 2);
    //document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:totalEvents',
		'dimensions': 'ga:eventAction'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML = formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users,ga:sessions,ga:avgSessionDuration,ga:bounceRate',
		'dimensions': 'ga:date'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:date,ga:hour'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:date,ga:medium'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:date,ga:source'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:date,ga:country'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:users',
		'dimensions': 'ga:1dayUsers,ga:7dayUsers,ga:30dayUsers'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });

  gapi.client.analytics.data.ga.get({
    'ids': 'ga:128026521',
    'start-date': '30daysAgo',
    'end-date': 'today',
    'metrics': 'ga:cohortRetetnionRate',
		'dimensions': 'ga:cohortNthDay,ga:cohortNthWeek,ga:cohortNthMonth'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').innerHTML += "<br><br>" + formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}
</script>

<script src="https://apis.google.com/js/client.js?onload=authorize"></script>
